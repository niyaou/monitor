// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.20.1
// source: proto/RadarFc2_ParamCfg.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// @brief  List of supported RX LPF Cutoff frequencies
type TEF82Xx_RxLpfCutOffType int32

const (
	TEF82Xx_RxLpfCutOffType_RX_LPF_CUTOFF_12_5MHZ TEF82Xx_RxLpfCutOffType = 0
	TEF82Xx_RxLpfCutOffType_RX_LPF_CUTOFF_15MHZ   TEF82Xx_RxLpfCutOffType = 1
	TEF82Xx_RxLpfCutOffType_RX_LPF_CUTOFF_20MHZ   TEF82Xx_RxLpfCutOffType = 2
	TEF82Xx_RxLpfCutOffType_RX_LPF_CUTOFF_25MHZ   TEF82Xx_RxLpfCutOffType = 3
	TEF82Xx_RxLpfCutOffType_RX_LPF_CUTOFF_WIDE    TEF82Xx_RxLpfCutOffType = 4
)

// Enum value maps for TEF82Xx_RxLpfCutOffType.
var (
	TEF82Xx_RxLpfCutOffType_name = map[int32]string{
		0: "RX_LPF_CUTOFF_12_5MHZ",
		1: "RX_LPF_CUTOFF_15MHZ",
		2: "RX_LPF_CUTOFF_20MHZ",
		3: "RX_LPF_CUTOFF_25MHZ",
		4: "RX_LPF_CUTOFF_WIDE",
	}
	TEF82Xx_RxLpfCutOffType_value = map[string]int32{
		"RX_LPF_CUTOFF_12_5MHZ": 0,
		"RX_LPF_CUTOFF_15MHZ":   1,
		"RX_LPF_CUTOFF_20MHZ":   2,
		"RX_LPF_CUTOFF_25MHZ":   3,
		"RX_LPF_CUTOFF_WIDE":    4,
	}
)

func (x TEF82Xx_RxLpfCutOffType) Enum() *TEF82Xx_RxLpfCutOffType {
	p := new(TEF82Xx_RxLpfCutOffType)
	*p = x
	return p
}

func (x TEF82Xx_RxLpfCutOffType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TEF82Xx_RxLpfCutOffType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_RadarFc2_ParamCfg_proto_enumTypes[0].Descriptor()
}

func (TEF82Xx_RxLpfCutOffType) Type() protoreflect.EnumType {
	return &file_proto_RadarFc2_ParamCfg_proto_enumTypes[0]
}

func (x TEF82Xx_RxLpfCutOffType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TEF82Xx_RxLpfCutOffType.Descriptor instead.
func (TEF82Xx_RxLpfCutOffType) EnumDescriptor() ([]byte, []int) {
	return file_proto_RadarFc2_ParamCfg_proto_rawDescGZIP(), []int{0}
}

// @brief  List of supported RX HPF Cutoff frequencies
type TEF82Xx_RxHpfCutOffType int32

const (
	TEF82Xx_RxHpfCutOffType_RX_HPF_CUTOFF_100KHZ  TEF82Xx_RxHpfCutOffType = 0
	TEF82Xx_RxHpfCutOffType_RX_HPF_CUTOFF_200KHZ  TEF82Xx_RxHpfCutOffType = 1
	TEF82Xx_RxHpfCutOffType_RX_HPF_CUTOFF_300KHZ  TEF82Xx_RxHpfCutOffType = 2
	TEF82Xx_RxHpfCutOffType_RX_HPF_CUTOFF_400KHZ  TEF82Xx_RxHpfCutOffType = 3
	TEF82Xx_RxHpfCutOffType_RX_HPF_CUTOFF_800KHZ  TEF82Xx_RxHpfCutOffType = 4
	TEF82Xx_RxHpfCutOffType_RX_HPF_CUTOFF_1600KHZ TEF82Xx_RxHpfCutOffType = 5
	TEF82Xx_RxHpfCutOffType_RX_HPF_CUTOFF_3200KHZ TEF82Xx_RxHpfCutOffType = 6
)

// Enum value maps for TEF82Xx_RxHpfCutOffType.
var (
	TEF82Xx_RxHpfCutOffType_name = map[int32]string{
		0: "RX_HPF_CUTOFF_100KHZ",
		1: "RX_HPF_CUTOFF_200KHZ",
		2: "RX_HPF_CUTOFF_300KHZ",
		3: "RX_HPF_CUTOFF_400KHZ",
		4: "RX_HPF_CUTOFF_800KHZ",
		5: "RX_HPF_CUTOFF_1600KHZ",
		6: "RX_HPF_CUTOFF_3200KHZ",
	}
	TEF82Xx_RxHpfCutOffType_value = map[string]int32{
		"RX_HPF_CUTOFF_100KHZ":  0,
		"RX_HPF_CUTOFF_200KHZ":  1,
		"RX_HPF_CUTOFF_300KHZ":  2,
		"RX_HPF_CUTOFF_400KHZ":  3,
		"RX_HPF_CUTOFF_800KHZ":  4,
		"RX_HPF_CUTOFF_1600KHZ": 5,
		"RX_HPF_CUTOFF_3200KHZ": 6,
	}
)

func (x TEF82Xx_RxHpfCutOffType) Enum() *TEF82Xx_RxHpfCutOffType {
	p := new(TEF82Xx_RxHpfCutOffType)
	*p = x
	return p
}

func (x TEF82Xx_RxHpfCutOffType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TEF82Xx_RxHpfCutOffType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_RadarFc2_ParamCfg_proto_enumTypes[1].Descriptor()
}

func (TEF82Xx_RxHpfCutOffType) Type() protoreflect.EnumType {
	return &file_proto_RadarFc2_ParamCfg_proto_enumTypes[1]
}

func (x TEF82Xx_RxHpfCutOffType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TEF82Xx_RxHpfCutOffType.Descriptor instead.
func (TEF82Xx_RxHpfCutOffType) EnumDescriptor() ([]byte, []int) {
	return file_proto_RadarFc2_ParamCfg_proto_rawDescGZIP(), []int{1}
}

// @brief  List of supported Phase Rotator Phase Code generation modes
type TEF82Xx_PRPCGenModeType int32

const (
	TEF82Xx_PRPCGenModeType_PR_PCGEN_NO_CHANGE             TEF82Xx_PRPCGenModeType = 0
	TEF82Xx_PRPCGenModeType_PR_PCGEN_REPLACE_MSB_WITH_QPSK TEF82Xx_PRPCGenModeType = 1
	TEF82Xx_PRPCGenModeType_PR_PCGEN_ADD_QPSK_TO_MSB       TEF82Xx_PRPCGenModeType = 2
)

// Enum value maps for TEF82Xx_PRPCGenModeType.
var (
	TEF82Xx_PRPCGenModeType_name = map[int32]string{
		0: "PR_PCGEN_NO_CHANGE",
		1: "PR_PCGEN_REPLACE_MSB_WITH_QPSK",
		2: "PR_PCGEN_ADD_QPSK_TO_MSB",
	}
	TEF82Xx_PRPCGenModeType_value = map[string]int32{
		"PR_PCGEN_NO_CHANGE":             0,
		"PR_PCGEN_REPLACE_MSB_WITH_QPSK": 1,
		"PR_PCGEN_ADD_QPSK_TO_MSB":       2,
	}
)

func (x TEF82Xx_PRPCGenModeType) Enum() *TEF82Xx_PRPCGenModeType {
	p := new(TEF82Xx_PRPCGenModeType)
	*p = x
	return p
}

func (x TEF82Xx_PRPCGenModeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TEF82Xx_PRPCGenModeType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_RadarFc2_ParamCfg_proto_enumTypes[2].Descriptor()
}

func (TEF82Xx_PRPCGenModeType) Type() protoreflect.EnumType {
	return &file_proto_RadarFc2_ParamCfg_proto_enumTypes[2]
}

func (x TEF82Xx_PRPCGenModeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TEF82Xx_PRPCGenModeType.Descriptor instead.
func (TEF82Xx_PRPCGenModeType) EnumDescriptor() ([]byte, []int) {
	return file_proto_RadarFc2_ParamCfg_proto_rawDescGZIP(), []int{2}
}

// @brief  List of supported Phase Rotator DDMA modes
type TEF82Xx_DDMAModeSelType int32

const (
	TEF82Xx_DDMAModeSelType_PR_DDMA_DISABLED          TEF82Xx_DDMAModeSelType = 0
	TEF82Xx_DDMAModeSelType_PR_DDMA_FUNCTIONAL_MODE   TEF82Xx_DDMAModeSelType = 1
	TEF82Xx_DDMAModeSelType_PR_DDMA_TEST_MODE         TEF82Xx_DDMAModeSelType = 2
	TEF82Xx_DDMAModeSelType_PR_DDMA_TEST_MODE_NOCHIRP TEF82Xx_DDMAModeSelType = 3
)

// Enum value maps for TEF82Xx_DDMAModeSelType.
var (
	TEF82Xx_DDMAModeSelType_name = map[int32]string{
		0: "PR_DDMA_DISABLED",
		1: "PR_DDMA_FUNCTIONAL_MODE",
		2: "PR_DDMA_TEST_MODE",
		3: "PR_DDMA_TEST_MODE_NOCHIRP",
	}
	TEF82Xx_DDMAModeSelType_value = map[string]int32{
		"PR_DDMA_DISABLED":          0,
		"PR_DDMA_FUNCTIONAL_MODE":   1,
		"PR_DDMA_TEST_MODE":         2,
		"PR_DDMA_TEST_MODE_NOCHIRP": 3,
	}
)

func (x TEF82Xx_DDMAModeSelType) Enum() *TEF82Xx_DDMAModeSelType {
	p := new(TEF82Xx_DDMAModeSelType)
	*p = x
	return p
}

func (x TEF82Xx_DDMAModeSelType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TEF82Xx_DDMAModeSelType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_RadarFc2_ParamCfg_proto_enumTypes[3].Descriptor()
}

func (TEF82Xx_DDMAModeSelType) Type() protoreflect.EnumType {
	return &file_proto_RadarFc2_ParamCfg_proto_enumTypes[3]
}

func (x TEF82Xx_DDMAModeSelType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TEF82Xx_DDMAModeSelType.Descriptor instead.
func (TEF82Xx_DDMAModeSelType) EnumDescriptor() ([]byte, []int) {
	return file_proto_RadarFc2_ParamCfg_proto_rawDescGZIP(), []int{3}
}

// @brief   Parameters used to define a chirp shape
type RFE_ChirpShapeType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time duration after the start of a chirp to when the ramp starts in ns steps
	U32TStart uint32 `protobuf:"varint,1,opt,name=u32TStart,proto3" json:"u32TStart,omitempty"`
	// Time duration between chirp ramp start and the beginning of the acquisition window in ns steps
	U32TPreSampling uint32 `protobuf:"varint,2,opt,name=u32TPreSampling,proto3" json:"u32TPreSampling,omitempty"`
	// Time duration after the acquisition window has finished and the end of the chirp ramp in ns steps
	U32TPostSampling uint32 `protobuf:"varint,3,opt,name=u32TPostSampling,proto3" json:"u32TPostSampling,omitempty"`
	// Time duration (ns) needed for the ramp to come back to the start frequency (start frequency isn't programmable)
	U32TReturn uint32 `protobuf:"varint,4,opt,name=u32TReturn,proto3" json:"u32TReturn,omitempty"`
	// Center frequency of the acquisition window in MHz
	U32CenterFrequency uint32 `protobuf:"varint,5,opt,name=u32CenterFrequency,proto3" json:"u32CenterFrequency,omitempty"`
	// Frequency bandwidth that the chirp will encompass during the acquisition windows in MHz
	U32AcqBandwidth uint32 `protobuf:"varint,6,opt,name=u32AcqBandwidth,proto3" json:"u32AcqBandwidth,omitempty"`
	// Bit field indicating which of the transmit channels are enabled
	U8TxChannelEnable uint32 `protobuf:"varint,7,opt,name=u8TxChannelEnable,proto3" json:"u8TxChannelEnable,omitempty"`
	// Transmit channel power in units specific to the front end device
	U32ATxChannelPower []uint32 `protobuf:"varint,8,rep,packed,name=u32aTxChannelPower,proto3" json:"u32aTxChannelPower,omitempty"`
	// The receive channel gain in dB
	U8ARxChannelGain []uint32 `protobuf:"varint,9,rep,packed,name=u8aRxChannelGain,proto3" json:"u8aRxChannelGain,omitempty"`
}

func (x *RFE_ChirpShapeType) Reset() {
	*x = RFE_ChirpShapeType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RFE_ChirpShapeType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RFE_ChirpShapeType) ProtoMessage() {}

func (x *RFE_ChirpShapeType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RFE_ChirpShapeType.ProtoReflect.Descriptor instead.
func (*RFE_ChirpShapeType) Descriptor() ([]byte, []int) {
	return file_proto_RadarFc2_ParamCfg_proto_rawDescGZIP(), []int{0}
}

func (x *RFE_ChirpShapeType) GetU32TStart() uint32 {
	if x != nil {
		return x.U32TStart
	}
	return 0
}

func (x *RFE_ChirpShapeType) GetU32TPreSampling() uint32 {
	if x != nil {
		return x.U32TPreSampling
	}
	return 0
}

func (x *RFE_ChirpShapeType) GetU32TPostSampling() uint32 {
	if x != nil {
		return x.U32TPostSampling
	}
	return 0
}

func (x *RFE_ChirpShapeType) GetU32TReturn() uint32 {
	if x != nil {
		return x.U32TReturn
	}
	return 0
}

func (x *RFE_ChirpShapeType) GetU32CenterFrequency() uint32 {
	if x != nil {
		return x.U32CenterFrequency
	}
	return 0
}

func (x *RFE_ChirpShapeType) GetU32AcqBandwidth() uint32 {
	if x != nil {
		return x.U32AcqBandwidth
	}
	return 0
}

func (x *RFE_ChirpShapeType) GetU8TxChannelEnable() uint32 {
	if x != nil {
		return x.U8TxChannelEnable
	}
	return 0
}

func (x *RFE_ChirpShapeType) GetU32ATxChannelPower() []uint32 {
	if x != nil {
		return x.U32ATxChannelPower
	}
	return nil
}

func (x *RFE_ChirpShapeType) GetU8ARxChannelGain() []uint32 {
	if x != nil {
		return x.U8ARxChannelGain
	}
	return nil
}

// @brief  Radar front-end Settings
type RFE_SettingType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	U8FrontEnd uint32 `protobuf:"varint,1,opt,name=u8FrontEnd,proto3" json:"u8FrontEnd,omitempty"` // Radar front end chip used
	// Bit field indicating which of the receive channels are enabled
	U32RxChannelEnable uint32 `protobuf:"varint,2,opt,name=u32RxChannelEnable,proto3" json:"u32RxChannelEnable,omitempty"`
	// The ADC sampling frequency in kSps
	U32SamplingFrequency uint32 `protobuf:"varint,3,opt,name=u32SamplingFrequency,proto3" json:"u32SamplingFrequency,omitempty"`
	// Number of chirps present in the frame
	U16NrChirpsInFrame uint32 `protobuf:"varint,4,opt,name=u16NrChirpsInFrame,proto3" json:"u16NrChirpsInFrame,omitempty"`
	// Number of sample that will be acquired during the acquisition window
	U16NrSamplesPerChirp uint32 `protobuf:"varint,5,opt,name=u16NrSamplesPerChirp,proto3" json:"u16NrSamplesPerChirp,omitempty"`
	// The number of chirp shapes that will be configured for this frame
	U8NrChirpShapes uint32 `protobuf:"varint,6,opt,name=u8NrChirpShapes,proto3" json:"u8NrChirpShapes,omitempty"`
	// Array to the chirp shapes which will be generated in the current frame
	StraChirpShapes []*RFE_ChirpShapeType `protobuf:"bytes,7,rep,name=straChirpShapes,proto3" json:"straChirpShapes,omitempty"`
	// Bit field indicating which of the RF switch are enabled
	U8TxSwitchEnable uint32 `protobuf:"varint,8,opt,name=u8TxSwitchEnable,proto3" json:"u8TxSwitchEnable,omitempty"`
	// TX gain
	U8ATxGain []uint32 `protobuf:"varint,9,rep,packed,name=u8aTxGain,proto3" json:"u8aTxGain,omitempty"`
}

func (x *RFE_SettingType) Reset() {
	*x = RFE_SettingType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RFE_SettingType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RFE_SettingType) ProtoMessage() {}

func (x *RFE_SettingType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RFE_SettingType.ProtoReflect.Descriptor instead.
func (*RFE_SettingType) Descriptor() ([]byte, []int) {
	return file_proto_RadarFc2_ParamCfg_proto_rawDescGZIP(), []int{1}
}

func (x *RFE_SettingType) GetU8FrontEnd() uint32 {
	if x != nil {
		return x.U8FrontEnd
	}
	return 0
}

func (x *RFE_SettingType) GetU32RxChannelEnable() uint32 {
	if x != nil {
		return x.U32RxChannelEnable
	}
	return 0
}

func (x *RFE_SettingType) GetU32SamplingFrequency() uint32 {
	if x != nil {
		return x.U32SamplingFrequency
	}
	return 0
}

func (x *RFE_SettingType) GetU16NrChirpsInFrame() uint32 {
	if x != nil {
		return x.U16NrChirpsInFrame
	}
	return 0
}

func (x *RFE_SettingType) GetU16NrSamplesPerChirp() uint32 {
	if x != nil {
		return x.U16NrSamplesPerChirp
	}
	return 0
}

func (x *RFE_SettingType) GetU8NrChirpShapes() uint32 {
	if x != nil {
		return x.U8NrChirpShapes
	}
	return 0
}

func (x *RFE_SettingType) GetStraChirpShapes() []*RFE_ChirpShapeType {
	if x != nil {
		return x.StraChirpShapes
	}
	return nil
}

func (x *RFE_SettingType) GetU8TxSwitchEnable() uint32 {
	if x != nil {
		return x.U8TxSwitchEnable
	}
	return 0
}

func (x *RFE_SettingType) GetU8ATxGain() []uint32 {
	if x != nil {
		return x.U8ATxGain
	}
	return nil
}

// @brief  Tef82XX(device specific) chirp shape optional parameters
type TEF82Xx_ProfileOptionalParamType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Phase shift value for each TX channel
	U32ATxPhase []uint32 `protobuf:"varint,1,rep,packed,name=u32aTxPhase,proto3" json:"u32aTxPhase,omitempty"`
	// Bipolar phase shift enable for each TX channel
	U8ATxBPS []uint32 `protobuf:"varint,2,rep,packed,name=u8aTxBPS,proto3" json:"u8aTxBPS,omitempty"`
	// Choose wideband mode decimation filter or narrowband mode
	U8PDCBWWide uint32 `protobuf:"varint,3,opt,name=u8PDCBWWide,proto3" json:"u8PDCBWWide,omitempty"`
	// Receiver High-pass filter cutoff frequency depicted by rsdkRfeTef82XXRxLpfCutOff
	EnuaRxLPF []TEF82Xx_RxLpfCutOffType `protobuf:"varint,4,rep,packed,name=enuaRxLPF,proto3,enum=RadarFc2_ParamCfg.TEF82Xx_RxLpfCutOffType" json:"enuaRxLPF,omitempty"`
	// Receiver High-pass filter cutoff frequency depicted by rsdkRfeTef82XXRxHpfCutOff
	EnuaRxHPF []TEF82Xx_RxHpfCutOffType `protobuf:"varint,5,rep,packed,name=enuaRxHPF,proto3,enum=RadarFc2_ParamCfg.TEF82Xx_RxHpfCutOffType" json:"enuaRxHPF,omitempty"`
	// Chirp PLL VCO Bandwidth options
	U8VcoSel uint32 `protobuf:"varint,6,opt,name=u8VcoSel,proto3" json:"u8VcoSel,omitempty"`
	// CSI2 Virtual Channel assigned for radar data transfer for a specific profile
	U8VirtualChannelNo uint32 `protobuf:"varint,7,opt,name=u8VirtualChannelNo,proto3" json:"u8VirtualChannelNo,omitempty"`
}

func (x *TEF82Xx_ProfileOptionalParamType) Reset() {
	*x = TEF82Xx_ProfileOptionalParamType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TEF82Xx_ProfileOptionalParamType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TEF82Xx_ProfileOptionalParamType) ProtoMessage() {}

func (x *TEF82Xx_ProfileOptionalParamType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TEF82Xx_ProfileOptionalParamType.ProtoReflect.Descriptor instead.
func (*TEF82Xx_ProfileOptionalParamType) Descriptor() ([]byte, []int) {
	return file_proto_RadarFc2_ParamCfg_proto_rawDescGZIP(), []int{2}
}

func (x *TEF82Xx_ProfileOptionalParamType) GetU32ATxPhase() []uint32 {
	if x != nil {
		return x.U32ATxPhase
	}
	return nil
}

func (x *TEF82Xx_ProfileOptionalParamType) GetU8ATxBPS() []uint32 {
	if x != nil {
		return x.U8ATxBPS
	}
	return nil
}

func (x *TEF82Xx_ProfileOptionalParamType) GetU8PDCBWWide() uint32 {
	if x != nil {
		return x.U8PDCBWWide
	}
	return 0
}

func (x *TEF82Xx_ProfileOptionalParamType) GetEnuaRxLPF() []TEF82Xx_RxLpfCutOffType {
	if x != nil {
		return x.EnuaRxLPF
	}
	return nil
}

func (x *TEF82Xx_ProfileOptionalParamType) GetEnuaRxHPF() []TEF82Xx_RxHpfCutOffType {
	if x != nil {
		return x.EnuaRxHPF
	}
	return nil
}

func (x *TEF82Xx_ProfileOptionalParamType) GetU8VcoSel() uint32 {
	if x != nil {
		return x.U8VcoSel
	}
	return 0
}

func (x *TEF82Xx_ProfileOptionalParamType) GetU8VirtualChannelNo() uint32 {
	if x != nil {
		return x.U8VirtualChannelNo
	}
	return 0
}

// @brief  Tef82XX(device specific) Freq Auto drift parameters
type TEF82Xx_AutoDriftParamType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enabeFreqAutoDrift
	U8EnabeFreqAutoDrift uint32 `protobuf:"varint,1,opt,name=u8EnabeFreqAutoDrift,proto3" json:"u8EnabeFreqAutoDrift,omitempty"`
	// FreqDriftHz required frequency drift in Hz, typical value < 40MHz
	U32FreqDriftHz uint32 `protobuf:"varint,2,opt,name=u32FreqDriftHz,proto3" json:"u32FreqDriftHz,omitempty"`
}

func (x *TEF82Xx_AutoDriftParamType) Reset() {
	*x = TEF82Xx_AutoDriftParamType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TEF82Xx_AutoDriftParamType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TEF82Xx_AutoDriftParamType) ProtoMessage() {}

func (x *TEF82Xx_AutoDriftParamType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TEF82Xx_AutoDriftParamType.ProtoReflect.Descriptor instead.
func (*TEF82Xx_AutoDriftParamType) Descriptor() ([]byte, []int) {
	return file_proto_RadarFc2_ParamCfg_proto_rawDescGZIP(), []int{3}
}

func (x *TEF82Xx_AutoDriftParamType) GetU8EnabeFreqAutoDrift() uint32 {
	if x != nil {
		return x.U8EnabeFreqAutoDrift
	}
	return 0
}

func (x *TEF82Xx_AutoDriftParamType) GetU32FreqDriftHz() uint32 {
	if x != nil {
		return x.U32FreqDriftHz
	}
	return 0
}

// @brief  Tef82XX(device specific) Phase Rotator parameters
type TEF82Xx_PhaseRotatorParamType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// enablePhaseRotators: Enable / Disable Phase Rotators
	U8EnablePhaseRotators uint32 `protobuf:"varint,1,opt,name=u8EnablePhaseRotators,proto3" json:"u8EnablePhaseRotators,omitempty"`
	// useDDMA: Source of initial phase code for each TX channel
	U8AUseDDMA []uint32 `protobuf:"varint,2,rep,packed,name=u8aUseDDMA,proto3" json:"u8aUseDDMA,omitempty"`
	// ddmaMode: DDMA mode common for the TXs that choose DDMA as source of initial phase code
	EnuDdmaMode TEF82Xx_DDMAModeSelType `protobuf:"varint,3,opt,name=enuDdmaMode,proto3,enum=RadarFc2_ParamCfg.TEF82Xx_DDMAModeSelType" json:"enuDdmaMode,omitempty"`
	// ddmaInitPhase: Initial phase value in degrees for DDMA mode for each TX channel
	U32ADdmaInitPhase []uint32 `protobuf:"varint,4,rep,packed,name=u32aDdmaInitPhase,proto3" json:"u32aDdmaInitPhase,omitempty"`
	// ddmaPhaseUpdate: Phase update value in degrees for DDMA mode for each TX channel
	U32ADdmaPhaseUpdate []uint32 `protobuf:"varint,5,rep,packed,name=u32aDdmaPhaseUpdate,proto3" json:"u32aDdmaPhaseUpdate,omitempty"`
	// finalPCGenMode: Phase code generation modes for each TX channel
	EnuaFinalPCGenMode []TEF82Xx_PRPCGenModeType `protobuf:"varint,6,rep,packed,name=enuaFinalPCGenMode,proto3,enum=RadarFc2_ParamCfg.TEF82Xx_PRPCGenModeType" json:"enuaFinalPCGenMode,omitempty"`
	// phaseShiftControlSource: Source of Phase Shift (BPSK/QPSK) control for each TX channel
	U8APhaseShiftControlSource []uint32 `protobuf:"varint,7,rep,packed,name=u8aPhaseShiftControlSource,proto3" json:"u8aPhaseShiftControlSource,omitempty"`
	// enAsyncBpskIOSampling: Sampling mode for BPSK IO control
	U8EnAsyncBpskIOSampling uint32 `protobuf:"varint,8,opt,name=u8EnAsyncBpskIOSampling,proto3" json:"u8EnAsyncBpskIOSampling,omitempty"`
	// enAsyncQpskIOSampling: Sampling mode for QPSK IO control
	U8EnAsyncQpskIOSampling uint32 `protobuf:"varint,9,opt,name=u8EnAsyncQpskIOSampling,proto3" json:"u8EnAsyncQpskIOSampling,omitempty"`
}

func (x *TEF82Xx_PhaseRotatorParamType) Reset() {
	*x = TEF82Xx_PhaseRotatorParamType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TEF82Xx_PhaseRotatorParamType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TEF82Xx_PhaseRotatorParamType) ProtoMessage() {}

func (x *TEF82Xx_PhaseRotatorParamType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TEF82Xx_PhaseRotatorParamType.ProtoReflect.Descriptor instead.
func (*TEF82Xx_PhaseRotatorParamType) Descriptor() ([]byte, []int) {
	return file_proto_RadarFc2_ParamCfg_proto_rawDescGZIP(), []int{4}
}

func (x *TEF82Xx_PhaseRotatorParamType) GetU8EnablePhaseRotators() uint32 {
	if x != nil {
		return x.U8EnablePhaseRotators
	}
	return 0
}

func (x *TEF82Xx_PhaseRotatorParamType) GetU8AUseDDMA() []uint32 {
	if x != nil {
		return x.U8AUseDDMA
	}
	return nil
}

func (x *TEF82Xx_PhaseRotatorParamType) GetEnuDdmaMode() TEF82Xx_DDMAModeSelType {
	if x != nil {
		return x.EnuDdmaMode
	}
	return TEF82Xx_DDMAModeSelType_PR_DDMA_DISABLED
}

func (x *TEF82Xx_PhaseRotatorParamType) GetU32ADdmaInitPhase() []uint32 {
	if x != nil {
		return x.U32ADdmaInitPhase
	}
	return nil
}

func (x *TEF82Xx_PhaseRotatorParamType) GetU32ADdmaPhaseUpdate() []uint32 {
	if x != nil {
		return x.U32ADdmaPhaseUpdate
	}
	return nil
}

func (x *TEF82Xx_PhaseRotatorParamType) GetEnuaFinalPCGenMode() []TEF82Xx_PRPCGenModeType {
	if x != nil {
		return x.EnuaFinalPCGenMode
	}
	return nil
}

func (x *TEF82Xx_PhaseRotatorParamType) GetU8APhaseShiftControlSource() []uint32 {
	if x != nil {
		return x.U8APhaseShiftControlSource
	}
	return nil
}

func (x *TEF82Xx_PhaseRotatorParamType) GetU8EnAsyncBpskIOSampling() uint32 {
	if x != nil {
		return x.U8EnAsyncBpskIOSampling
	}
	return 0
}

func (x *TEF82Xx_PhaseRotatorParamType) GetU8EnAsyncQpskIOSampling() uint32 {
	if x != nil {
		return x.U8EnAsyncQpskIOSampling
	}
	return 0
}

// @brief  Tef82XX(device specific) chirp frame optional parameters.
type TEF82Xx_FrameOptionalParamType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Sequence interval is a delay between chirp frames [ns] (25ns resolution)
	U32SeqInterval uint32 `protobuf:"varint,1,opt,name=u32SeqInterval,proto3" json:"u32SeqInterval,omitempty"`
	// Power On Delay introduces a delay before the first chirp, in order to allow the analog circuits to stabilize
	U32PonDelay uint32 `protobuf:"varint,2,opt,name=u32PonDelay,proto3" json:"u32PonDelay,omitempty"`
	// Inner Safety Monitor enable delay
	U16IsmDelay uint32 `protobuf:"varint,3,opt,name=u16IsmDelay,proto3" json:"u16IsmDelay,omitempty"`
	// Use external chirp start trigger
	U8UseExtTrig uint32 `protobuf:"varint,4,opt,name=u8UseExtTrig,proto3" json:"u8UseExtTrig,omitempty"`
	// Profile Reset Enable
	U8ProfReset uint32 `protobuf:"varint,5,opt,name=u8ProfReset,proto3" json:"u8ProfReset,omitempty"`
	// This input parameter decides the sequence of using different profiles in a chirp frame
	U8ProfModeSel uint32 `protobuf:"varint,6,opt,name=u8ProfModeSel,proto3" json:"u8ProfModeSel,omitempty"`
	// This is a custom list of maximum 8 profiles that can be used by the RFE in any order specified by the user
	U8AProfList []uint32 `protobuf:"varint,7,rep,packed,name=u8aProfList,proto3" json:"u8aProfList,omitempty"`
	// This input parameter determines how many times one profile will repeat in a profile sequence
	U8ProfStayCnt uint32 `protobuf:"varint,8,opt,name=u8ProfStayCnt,proto3" json:"u8ProfStayCnt,omitempty"`
	// Group power on delay for all TXs in [us]
	U32TxPonGroupDelay uint32 `protobuf:"varint,9,opt,name=u32TxPonGroupDelay,proto3" json:"u32TxPonGroupDelay,omitempty"`
	// Group power on delay for all RXs in [us]
	U32RxPonGroupDelay uint32 `protobuf:"varint,10,opt,name=u32RxPonGroupDelay,proto3" json:"u32RxPonGroupDelay,omitempty"`
	// Group delay fine control for Tx1 and Rx1 pair
	U32GDelayFineControl1 uint32 `protobuf:"varint,11,opt,name=u32GDelayFineControl1,proto3" json:"u32GDelayFineControl1,omitempty"`
	// Group delay fine control for Tx2 and Rx2 pair
	U32GDelayFineControl2 uint32 `protobuf:"varint,12,opt,name=u32GDelayFineControl2,proto3" json:"u32GDelayFineControl2,omitempty"`
	// Group delay fine control for Tx3 and Rx3 pair
	U32GDelayFineControl3 uint32 `protobuf:"varint,13,opt,name=u32GDelayFineControl3,proto3" json:"u32GDelayFineControl3,omitempty"`
	// Group delay fine control for Rx4
	U32GDelayFineControl4 uint32 `protobuf:"varint,14,opt,name=u32GDelayFineControl4,proto3" json:"u32GDelayFineControl4,omitempty"`
	// Number of chirp sequences in a burst with a chirp start trigger
	U8NumSeqInBurst uint32 `protobuf:"varint,15,opt,name=u8NumSeqInBurst,proto3" json:"u8NumSeqInBurst,omitempty"`
	// Safety monitoring activation control
	U8SafetyMontrActCtrl uint32 `protobuf:"varint,16,opt,name=u8SafetyMontrActCtrl,proto3" json:"u8SafetyMontrActCtrl,omitempty"`
	// PR Safety Check
	U8EnPRSafetyCheck uint32 `protobuf:"varint,17,opt,name=u8EnPRSafetyCheck,proto3" json:"u8EnPRSafetyCheck,omitempty"`
	// Delay in [us], at the end of the chirp sequence to start the safety check
	U32PrSafetyStartDelay uint32 `protobuf:"varint,18,opt,name=u32PrSafetyStartDelay,proto3" json:"u32PrSafetyStartDelay,omitempty"`
	// PR calibration
	U8EnPRCalib uint32 `protobuf:"varint,19,opt,name=u8EnPRCalib,proto3" json:"u8EnPRCalib,omitempty"`
	// Delay in [us], at the start of the chirp sequence to start the calibration check
	U32PrCalibStartDelay uint32 `protobuf:"varint,20,opt,name=u32PrCalibStartDelay,proto3" json:"u32PrCalibStartDelay,omitempty"`
	// Type of chirp - progressive or non-progressive
	U8ChirpProgressiveType uint32 `protobuf:"varint,21,opt,name=u8ChirpProgressiveType,proto3" json:"u8ChirpProgressiveType,omitempty"`
	// Sweep reset control mode
	U8SweepRstCtrl uint32 `protobuf:"varint,22,opt,name=u8SweepRstCtrl,proto3" json:"u8SweepRstCtrl,omitempty"`
	// CAFC Fast Return Gear Switching
	U8FastDischargeGSEnable uint32 `protobuf:"varint,23,opt,name=u8FastDischargeGSEnable,proto3" json:"u8FastDischargeGSEnable,omitempty"`
	// CAFC Fast Return current injection
	U8FastDischargeCurrInjEnable uint32 `protobuf:"varint,24,opt,name=u8FastDischargeCurrInjEnable,proto3" json:"u8FastDischargeCurrInjEnable,omitempty"`
	// CAFC AAFC and TX PR calibration frequency modes
	U8CafcTxCalMode uint32 `protobuf:"varint,25,opt,name=u8CafcTxCalMode,proto3" json:"u8CafcTxCalMode,omitempty"`
	// CAFC PLL LPF setting
	U8CafcPllLPFSel uint32 `protobuf:"varint,26,opt,name=u8CafcPllLPFSel,proto3" json:"u8CafcPllLPFSel,omitempty"`
	// Choose which loop filter setting LUT table to be used
	U8CafcPllLPFLUTSel uint32 `protobuf:"varint,27,opt,name=u8CafcPllLPFLUTSel,proto3" json:"u8CafcPllLPFLUTSel,omitempty"`
	// PLL Loop bandwidth in Hz
	U32CafcLoopBandwidth uint32 `protobuf:"varint,28,opt,name=u32CafcLoopBandwidth,proto3" json:"u32CafcLoopBandwidth,omitempty"`
	// TEF82XX optional profile params
	StraProfileOpParam []*TEF82Xx_ProfileOptionalParamType `protobuf:"bytes,29,rep,name=straProfileOpParam,proto3" json:"straProfileOpParam,omitempty"`
	// TEF82XX optional Frequency auto drift params
	StrAutoDrift *TEF82Xx_AutoDriftParamType `protobuf:"bytes,30,opt,name=strAutoDrift,proto3" json:"strAutoDrift,omitempty"`
	// TEF82XX optional Phase rotator params
	StrPhaseRotator *TEF82Xx_PhaseRotatorParamType `protobuf:"bytes,31,opt,name=strPhaseRotator,proto3" json:"strPhaseRotator,omitempty"`
}

func (x *TEF82Xx_FrameOptionalParamType) Reset() {
	*x = TEF82Xx_FrameOptionalParamType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TEF82Xx_FrameOptionalParamType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TEF82Xx_FrameOptionalParamType) ProtoMessage() {}

func (x *TEF82Xx_FrameOptionalParamType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TEF82Xx_FrameOptionalParamType.ProtoReflect.Descriptor instead.
func (*TEF82Xx_FrameOptionalParamType) Descriptor() ([]byte, []int) {
	return file_proto_RadarFc2_ParamCfg_proto_rawDescGZIP(), []int{5}
}

func (x *TEF82Xx_FrameOptionalParamType) GetU32SeqInterval() uint32 {
	if x != nil {
		return x.U32SeqInterval
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU32PonDelay() uint32 {
	if x != nil {
		return x.U32PonDelay
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU16IsmDelay() uint32 {
	if x != nil {
		return x.U16IsmDelay
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8UseExtTrig() uint32 {
	if x != nil {
		return x.U8UseExtTrig
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8ProfReset() uint32 {
	if x != nil {
		return x.U8ProfReset
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8ProfModeSel() uint32 {
	if x != nil {
		return x.U8ProfModeSel
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8AProfList() []uint32 {
	if x != nil {
		return x.U8AProfList
	}
	return nil
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8ProfStayCnt() uint32 {
	if x != nil {
		return x.U8ProfStayCnt
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU32TxPonGroupDelay() uint32 {
	if x != nil {
		return x.U32TxPonGroupDelay
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU32RxPonGroupDelay() uint32 {
	if x != nil {
		return x.U32RxPonGroupDelay
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU32GDelayFineControl1() uint32 {
	if x != nil {
		return x.U32GDelayFineControl1
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU32GDelayFineControl2() uint32 {
	if x != nil {
		return x.U32GDelayFineControl2
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU32GDelayFineControl3() uint32 {
	if x != nil {
		return x.U32GDelayFineControl3
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU32GDelayFineControl4() uint32 {
	if x != nil {
		return x.U32GDelayFineControl4
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8NumSeqInBurst() uint32 {
	if x != nil {
		return x.U8NumSeqInBurst
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8SafetyMontrActCtrl() uint32 {
	if x != nil {
		return x.U8SafetyMontrActCtrl
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8EnPRSafetyCheck() uint32 {
	if x != nil {
		return x.U8EnPRSafetyCheck
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU32PrSafetyStartDelay() uint32 {
	if x != nil {
		return x.U32PrSafetyStartDelay
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8EnPRCalib() uint32 {
	if x != nil {
		return x.U8EnPRCalib
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU32PrCalibStartDelay() uint32 {
	if x != nil {
		return x.U32PrCalibStartDelay
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8ChirpProgressiveType() uint32 {
	if x != nil {
		return x.U8ChirpProgressiveType
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8SweepRstCtrl() uint32 {
	if x != nil {
		return x.U8SweepRstCtrl
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8FastDischargeGSEnable() uint32 {
	if x != nil {
		return x.U8FastDischargeGSEnable
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8FastDischargeCurrInjEnable() uint32 {
	if x != nil {
		return x.U8FastDischargeCurrInjEnable
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8CafcTxCalMode() uint32 {
	if x != nil {
		return x.U8CafcTxCalMode
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8CafcPllLPFSel() uint32 {
	if x != nil {
		return x.U8CafcPllLPFSel
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU8CafcPllLPFLUTSel() uint32 {
	if x != nil {
		return x.U8CafcPllLPFLUTSel
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetU32CafcLoopBandwidth() uint32 {
	if x != nil {
		return x.U32CafcLoopBandwidth
	}
	return 0
}

func (x *TEF82Xx_FrameOptionalParamType) GetStraProfileOpParam() []*TEF82Xx_ProfileOptionalParamType {
	if x != nil {
		return x.StraProfileOpParam
	}
	return nil
}

func (x *TEF82Xx_FrameOptionalParamType) GetStrAutoDrift() *TEF82Xx_AutoDriftParamType {
	if x != nil {
		return x.StrAutoDrift
	}
	return nil
}

func (x *TEF82Xx_FrameOptionalParamType) GetStrPhaseRotator() *TEF82Xx_PhaseRotatorParamType {
	if x != nil {
		return x.StrPhaseRotator
	}
	return nil
}

// @brief  Radar parameter configuration
type RadarParamCfgType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	U16Cmd                 uint32                          `protobuf:"varint,1,opt,name=u16Cmd,proto3" json:"u16Cmd,omitempty"` // cmd kinds
	U16AcqNrFrames         uint32                          `protobuf:"varint,2,opt,name=u16AcqNrFrames,proto3" json:"u16AcqNrFrames,omitempty"`
	StrRfeSetting          *RFE_SettingType                `protobuf:"bytes,3,opt,name=strRfeSetting,proto3" json:"strRfeSetting,omitempty"`
	StrTef82XxFrameOpParam *TEF82Xx_FrameOptionalParamType `protobuf:"bytes,4,opt,name=strTef82xxFrameOpParam,proto3" json:"strTef82xxFrameOpParam,omitempty"`
}

func (x *RadarParamCfgType) Reset() {
	*x = RadarParamCfgType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RadarParamCfgType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RadarParamCfgType) ProtoMessage() {}

func (x *RadarParamCfgType) ProtoReflect() protoreflect.Message {
	mi := &file_proto_RadarFc2_ParamCfg_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RadarParamCfgType.ProtoReflect.Descriptor instead.
func (*RadarParamCfgType) Descriptor() ([]byte, []int) {
	return file_proto_RadarFc2_ParamCfg_proto_rawDescGZIP(), []int{6}
}

func (x *RadarParamCfgType) GetU16Cmd() uint32 {
	if x != nil {
		return x.U16Cmd
	}
	return 0
}

func (x *RadarParamCfgType) GetU16AcqNrFrames() uint32 {
	if x != nil {
		return x.U16AcqNrFrames
	}
	return 0
}

func (x *RadarParamCfgType) GetStrRfeSetting() *RFE_SettingType {
	if x != nil {
		return x.StrRfeSetting
	}
	return nil
}

func (x *RadarParamCfgType) GetStrTef82XxFrameOpParam() *TEF82Xx_FrameOptionalParamType {
	if x != nil {
		return x.StrTef82XxFrameOpParam
	}
	return nil
}

var File_proto_RadarFc2_ParamCfg_proto protoreflect.FileDescriptor

var file_proto_RadarFc2_ParamCfg_proto_rawDesc = []byte{
	0x0a, 0x1d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x52, 0x61, 0x64, 0x61, 0x72, 0x46, 0x63, 0x32,
	0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x66, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x11, 0x52, 0x61, 0x64, 0x61, 0x72, 0x46, 0x63, 0x32, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43,
	0x66, 0x67, 0x22, 0x8c, 0x03, 0x0a, 0x12, 0x52, 0x46, 0x45, 0x5f, 0x43, 0x68, 0x69, 0x72, 0x70,
	0x53, 0x68, 0x61, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x33, 0x32,
	0x54, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x33,
	0x32, 0x54, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x33, 0x32, 0x54, 0x50,
	0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x75, 0x33, 0x32, 0x54, 0x50, 0x72, 0x65, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e,
	0x67, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x33, 0x32, 0x54, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x61, 0x6d,
	0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x75, 0x33, 0x32,
	0x54, 0x50, 0x6f, 0x73, 0x74, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x33, 0x32, 0x54, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x75, 0x33, 0x32, 0x54, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x2e, 0x0a,
	0x12, 0x75, 0x33, 0x32, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x33, 0x32, 0x43, 0x65,
	0x6e, 0x74, 0x65, 0x72, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x28, 0x0a,
	0x0f, 0x75, 0x33, 0x32, 0x41, 0x63, 0x71, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x33, 0x32, 0x41, 0x63, 0x71, 0x42, 0x61,
	0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x38, 0x54, 0x78, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x11, 0x75, 0x38, 0x54, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x33, 0x32, 0x61, 0x54, 0x78, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x12, 0x75, 0x33, 0x32, 0x61, 0x54, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x38, 0x61, 0x52, 0x78, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x61, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52,
	0x10, 0x75, 0x38, 0x61, 0x52, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x47, 0x61, 0x69,
	0x6e, 0x22, 0xbe, 0x03, 0x0a, 0x0f, 0x52, 0x46, 0x45, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x38, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x45, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x75, 0x38, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x45, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x33, 0x32, 0x52, 0x78, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x12, 0x75, 0x33, 0x32, 0x52, 0x78, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x33, 0x32, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x69, 0x6e, 0x67, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x33, 0x32, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67,
	0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x31, 0x36,
	0x4e, 0x72, 0x43, 0x68, 0x69, 0x72, 0x70, 0x73, 0x49, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x31, 0x36, 0x4e, 0x72, 0x43, 0x68, 0x69, 0x72,
	0x70, 0x73, 0x49, 0x6e, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x31, 0x36,
	0x4e, 0x72, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x69, 0x72,
	0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x31, 0x36, 0x4e, 0x72, 0x53, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x73, 0x50, 0x65, 0x72, 0x43, 0x68, 0x69, 0x72, 0x70, 0x12, 0x28, 0x0a,
	0x0f, 0x75, 0x38, 0x4e, 0x72, 0x43, 0x68, 0x69, 0x72, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x38, 0x4e, 0x72, 0x43, 0x68, 0x69, 0x72,
	0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x61, 0x43,
	0x68, 0x69, 0x72, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x46, 0x63, 0x32, 0x5f, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x43, 0x66, 0x67, 0x2e, 0x52, 0x46, 0x45, 0x5f, 0x43, 0x68, 0x69, 0x72, 0x70, 0x53, 0x68,
	0x61, 0x70, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x61, 0x43, 0x68, 0x69,
	0x72, 0x70, 0x53, 0x68, 0x61, 0x70, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x75, 0x38, 0x54, 0x78,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x10, 0x75, 0x38, 0x54, 0x78, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x38, 0x61, 0x54, 0x78, 0x47, 0x61, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x75, 0x38, 0x61, 0x54, 0x78, 0x47, 0x61,
	0x69, 0x6e, 0x22, 0xe2, 0x02, 0x0a, 0x20, 0x54, 0x45, 0x46, 0x38, 0x32, 0x78, 0x78, 0x5f, 0x50,
	0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x33, 0x32, 0x61, 0x54,
	0x78, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x33,
	0x32, 0x61, 0x54, 0x78, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x38, 0x61,
	0x54, 0x78, 0x42, 0x50, 0x53, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x75, 0x38, 0x61,
	0x54, 0x78, 0x42, 0x50, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x38, 0x50, 0x44, 0x43, 0x42, 0x57,
	0x57, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x38, 0x50, 0x44,
	0x43, 0x42, 0x57, 0x57, 0x69, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x61, 0x52,
	0x78, 0x4c, 0x50, 0x46, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x52, 0x61, 0x64,
	0x61, 0x72, 0x46, 0x63, 0x32, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x66, 0x67, 0x2e, 0x54,
	0x45, 0x46, 0x38, 0x32, 0x78, 0x78, 0x5f, 0x52, 0x78, 0x4c, 0x70, 0x66, 0x43, 0x75, 0x74, 0x4f,
	0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x75, 0x61, 0x52, 0x78, 0x4c, 0x50,
	0x46, 0x12, 0x48, 0x0a, 0x09, 0x65, 0x6e, 0x75, 0x61, 0x52, 0x78, 0x48, 0x50, 0x46, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x46, 0x63, 0x32, 0x5f,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x45, 0x46, 0x38, 0x32, 0x78, 0x78,
	0x5f, 0x52, 0x78, 0x48, 0x70, 0x66, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x09, 0x65, 0x6e, 0x75, 0x61, 0x52, 0x78, 0x48, 0x50, 0x46, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x38, 0x56, 0x63, 0x6f, 0x53, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x75,
	0x38, 0x56, 0x63, 0x6f, 0x53, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x38, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x38, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x6f, 0x22, 0x78, 0x0a, 0x1a, 0x54, 0x45, 0x46, 0x38, 0x32,
	0x78, 0x78, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x72, 0x69, 0x66, 0x74, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x38, 0x45, 0x6e, 0x61, 0x62, 0x65,
	0x46, 0x72, 0x65, 0x71, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x72, 0x69, 0x66, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x38, 0x45, 0x6e, 0x61, 0x62, 0x65, 0x46, 0x72, 0x65, 0x71,
	0x41, 0x75, 0x74, 0x6f, 0x44, 0x72, 0x69, 0x66, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x33, 0x32,
	0x46, 0x72, 0x65, 0x71, 0x44, 0x72, 0x69, 0x66, 0x74, 0x48, 0x7a, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x75, 0x33, 0x32, 0x46, 0x72, 0x65, 0x71, 0x44, 0x72, 0x69, 0x66, 0x74, 0x48,
	0x7a, 0x22, 0xb3, 0x04, 0x0a, 0x1d, 0x54, 0x45, 0x46, 0x38, 0x32, 0x78, 0x78, 0x5f, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x38, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x15, 0x75, 0x38, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x38, 0x61,
	0x55, 0x73, 0x65, 0x44, 0x44, 0x4d, 0x41, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0a, 0x75,
	0x38, 0x61, 0x55, 0x73, 0x65, 0x44, 0x44, 0x4d, 0x41, 0x12, 0x4c, 0x0a, 0x0b, 0x65, 0x6e, 0x75,
	0x44, 0x64, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a,
	0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x46, 0x63, 0x32, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43,
	0x66, 0x67, 0x2e, 0x54, 0x45, 0x46, 0x38, 0x32, 0x78, 0x78, 0x5f, 0x44, 0x44, 0x4d, 0x41, 0x4d,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x75, 0x44,
	0x64, 0x6d, 0x61, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x75, 0x33, 0x32, 0x61, 0x44,
	0x64, 0x6d, 0x61, 0x49, 0x6e, 0x69, 0x74, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x11, 0x75, 0x33, 0x32, 0x61, 0x44, 0x64, 0x6d, 0x61, 0x49, 0x6e, 0x69, 0x74,
	0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x75, 0x33, 0x32, 0x61, 0x44, 0x64, 0x6d,
	0x61, 0x50, 0x68, 0x61, 0x73, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x13, 0x75, 0x33, 0x32, 0x61, 0x44, 0x64, 0x6d, 0x61, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x5a, 0x0a, 0x12, 0x65, 0x6e, 0x75, 0x61, 0x46,
	0x69, 0x6e, 0x61, 0x6c, 0x50, 0x43, 0x47, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x46, 0x63, 0x32, 0x5f, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x45, 0x46, 0x38, 0x32, 0x78, 0x78, 0x5f,
	0x50, 0x52, 0x50, 0x43, 0x47, 0x65, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x12, 0x65, 0x6e, 0x75, 0x61, 0x46, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x43, 0x47, 0x65, 0x6e, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x1a, 0x75, 0x38, 0x61, 0x50, 0x68, 0x61, 0x73, 0x65, 0x53,
	0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x1a, 0x75, 0x38, 0x61, 0x50, 0x68, 0x61, 0x73,
	0x65, 0x53, 0x68, 0x69, 0x66, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x75, 0x38, 0x45, 0x6e, 0x41, 0x73, 0x79, 0x6e, 0x63,
	0x42, 0x70, 0x73, 0x6b, 0x49, 0x4f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x75, 0x38, 0x45, 0x6e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x42,
	0x70, 0x73, 0x6b, 0x49, 0x4f, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x38, 0x0a,
	0x17, 0x75, 0x38, 0x45, 0x6e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x70, 0x73, 0x6b, 0x49, 0x4f,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17,
	0x75, 0x38, 0x45, 0x6e, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x51, 0x70, 0x73, 0x6b, 0x49, 0x4f, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0xba, 0x0c, 0x0a, 0x1e, 0x54, 0x45, 0x46, 0x38,
	0x32, 0x78, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x33,
	0x32, 0x53, 0x65, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x75, 0x33, 0x32, 0x53, 0x65, 0x71, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x33, 0x32, 0x50, 0x6f, 0x6e, 0x44, 0x65, 0x6c, 0x61,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x33, 0x32, 0x50, 0x6f, 0x6e, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x31, 0x36, 0x49, 0x73, 0x6d, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x31, 0x36, 0x49, 0x73,
	0x6d, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x75, 0x38, 0x55, 0x73, 0x65, 0x45,
	0x78, 0x74, 0x54, 0x72, 0x69, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x75, 0x38,
	0x55, 0x73, 0x65, 0x45, 0x78, 0x74, 0x54, 0x72, 0x69, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x38,
	0x50, 0x72, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x75, 0x38, 0x50, 0x72, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x75, 0x38, 0x50, 0x72, 0x6f, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x38, 0x50, 0x72, 0x6f, 0x66, 0x4d, 0x6f, 0x64, 0x65, 0x53,
	0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x38, 0x61, 0x50, 0x72, 0x6f, 0x66, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x38, 0x61, 0x50, 0x72, 0x6f, 0x66,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x38, 0x50, 0x72, 0x6f, 0x66, 0x53, 0x74,
	0x61, 0x79, 0x43, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x75, 0x38, 0x50,
	0x72, 0x6f, 0x66, 0x53, 0x74, 0x61, 0x79, 0x43, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x33,
	0x32, 0x54, 0x78, 0x50, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x33, 0x32, 0x54, 0x78, 0x50, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x2e, 0x0a, 0x12, 0x75, 0x33,
	0x32, 0x52, 0x78, 0x50, 0x6f, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x33, 0x32, 0x52, 0x78, 0x50, 0x6f, 0x6e,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x33,
	0x32, 0x47, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x31, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x75, 0x33, 0x32, 0x47, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x31,
	0x12, 0x34, 0x0a, 0x15, 0x75, 0x33, 0x32, 0x47, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6e,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x32, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x15, 0x75, 0x33, 0x32, 0x47, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x32, 0x12, 0x34, 0x0a, 0x15, 0x75, 0x33, 0x32, 0x47, 0x44, 0x65,
	0x6c, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x33, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x75, 0x33, 0x32, 0x47, 0x44, 0x65, 0x6c, 0x61, 0x79,
	0x46, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x33, 0x12, 0x34, 0x0a, 0x15,
	0x75, 0x33, 0x32, 0x47, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x75, 0x33, 0x32,
	0x47, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x34, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x38, 0x4e, 0x75, 0x6d, 0x53, 0x65, 0x71, 0x49, 0x6e,
	0x42, 0x75, 0x72, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x38, 0x4e,
	0x75, 0x6d, 0x53, 0x65, 0x71, 0x49, 0x6e, 0x42, 0x75, 0x72, 0x73, 0x74, 0x12, 0x32, 0x0a, 0x14,
	0x75, 0x38, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x72, 0x41, 0x63, 0x74,
	0x43, 0x74, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x38, 0x53, 0x61,
	0x66, 0x65, 0x74, 0x79, 0x4d, 0x6f, 0x6e, 0x74, 0x72, 0x41, 0x63, 0x74, 0x43, 0x74, 0x72, 0x6c,
	0x12, 0x2c, 0x0a, 0x11, 0x75, 0x38, 0x45, 0x6e, 0x50, 0x52, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x75, 0x38, 0x45,
	0x6e, 0x50, 0x52, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x34,
	0x0a, 0x15, 0x75, 0x33, 0x32, 0x50, 0x72, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x75,
	0x33, 0x32, 0x50, 0x72, 0x53, 0x61, 0x66, 0x65, 0x74, 0x79, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x65, 0x6c, 0x61, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x75, 0x38, 0x45, 0x6e, 0x50, 0x52, 0x43, 0x61,
	0x6c, 0x69, 0x62, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x75, 0x38, 0x45, 0x6e, 0x50,
	0x52, 0x43, 0x61, 0x6c, 0x69, 0x62, 0x12, 0x32, 0x0a, 0x14, 0x75, 0x33, 0x32, 0x50, 0x72, 0x43,
	0x61, 0x6c, 0x69, 0x62, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x33, 0x32, 0x50, 0x72, 0x43, 0x61, 0x6c, 0x69, 0x62,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x12, 0x36, 0x0a, 0x16, 0x75, 0x38,
	0x43, 0x68, 0x69, 0x72, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x16, 0x75, 0x38, 0x43, 0x68,
	0x69, 0x72, 0x70, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x69, 0x76, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x38, 0x53, 0x77, 0x65, 0x65, 0x70, 0x52, 0x73, 0x74,
	0x43, 0x74, 0x72, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x38, 0x53, 0x77,
	0x65, 0x65, 0x70, 0x52, 0x73, 0x74, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x75, 0x38,
	0x46, 0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x53, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x75, 0x38, 0x46,
	0x61, 0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x47, 0x53, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x42, 0x0a, 0x1c, 0x75, 0x38, 0x46, 0x61, 0x73, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x49, 0x6e, 0x6a, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x1c, 0x75, 0x38, 0x46, 0x61,
	0x73, 0x74, 0x44, 0x69, 0x73, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x75, 0x72, 0x72, 0x49,
	0x6e, 0x6a, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x38, 0x43, 0x61,
	0x66, 0x63, 0x54, 0x78, 0x43, 0x61, 0x6c, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x75, 0x38, 0x43, 0x61, 0x66, 0x63, 0x54, 0x78, 0x43, 0x61, 0x6c, 0x4d, 0x6f,
	0x64, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x75, 0x38, 0x43, 0x61, 0x66, 0x63, 0x50, 0x6c, 0x6c, 0x4c,
	0x50, 0x46, 0x53, 0x65, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x75, 0x38, 0x43,
	0x61, 0x66, 0x63, 0x50, 0x6c, 0x6c, 0x4c, 0x50, 0x46, 0x53, 0x65, 0x6c, 0x12, 0x2e, 0x0a, 0x12,
	0x75, 0x38, 0x43, 0x61, 0x66, 0x63, 0x50, 0x6c, 0x6c, 0x4c, 0x50, 0x46, 0x4c, 0x55, 0x54, 0x53,
	0x65, 0x6c, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x75, 0x38, 0x43, 0x61, 0x66, 0x63,
	0x50, 0x6c, 0x6c, 0x4c, 0x50, 0x46, 0x4c, 0x55, 0x54, 0x53, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x14,
	0x75, 0x33, 0x32, 0x43, 0x61, 0x66, 0x63, 0x4c, 0x6f, 0x6f, 0x70, 0x42, 0x61, 0x6e, 0x64, 0x77,
	0x69, 0x64, 0x74, 0x68, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x75, 0x33, 0x32, 0x43,
	0x61, 0x66, 0x63, 0x4c, 0x6f, 0x6f, 0x70, 0x42, 0x61, 0x6e, 0x64, 0x77, 0x69, 0x64, 0x74, 0x68,
	0x12, 0x63, 0x0a, 0x12, 0x73, 0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f,
	0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x52,
	0x61, 0x64, 0x61, 0x72, 0x46, 0x63, 0x32, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x66, 0x67,
	0x2e, 0x54, 0x45, 0x46, 0x38, 0x32, 0x78, 0x78, 0x5f, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x12, 0x73, 0x74, 0x72, 0x61, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x4f, 0x70,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x51, 0x0a, 0x0c, 0x73, 0x74, 0x72, 0x41, 0x75, 0x74, 0x6f,
	0x44, 0x72, 0x69, 0x66, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x52, 0x61,
	0x64, 0x61, 0x72, 0x46, 0x63, 0x32, 0x5f, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x66, 0x67, 0x2e,
	0x54, 0x45, 0x46, 0x38, 0x32, 0x78, 0x78, 0x5f, 0x41, 0x75, 0x74, 0x6f, 0x44, 0x72, 0x69, 0x66,
	0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x73, 0x74, 0x72, 0x41,
	0x75, 0x74, 0x6f, 0x44, 0x72, 0x69, 0x66, 0x74, 0x12, 0x5a, 0x0a, 0x0f, 0x73, 0x74, 0x72, 0x50,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x46, 0x63, 0x32, 0x5f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x45, 0x46, 0x38, 0x32, 0x78, 0x78, 0x5f, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0f, 0x73, 0x74, 0x72, 0x50, 0x68, 0x61, 0x73, 0x65, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x6f, 0x72, 0x22, 0x88, 0x02, 0x0a, 0x11, 0x52, 0x61, 0x64, 0x61, 0x72, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x43, 0x66, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x31,
	0x36, 0x43, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x31, 0x36, 0x43,
	0x6d, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x75, 0x31, 0x36, 0x41, 0x63, 0x71, 0x4e, 0x72, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x75, 0x31, 0x36, 0x41,
	0x63, 0x71, 0x4e, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x73, 0x74,
	0x72, 0x52, 0x66, 0x65, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x46, 0x63, 0x32, 0x5f, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x43, 0x66, 0x67, 0x2e, 0x52, 0x46, 0x45, 0x5f, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x73, 0x74, 0x72, 0x52, 0x66, 0x65, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x12, 0x69, 0x0a, 0x16, 0x73, 0x74, 0x72, 0x54, 0x65, 0x66, 0x38, 0x32,
	0x78, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x52, 0x61, 0x64, 0x61, 0x72, 0x46, 0x63, 0x32, 0x5f,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x43, 0x66, 0x67, 0x2e, 0x54, 0x45, 0x46, 0x38, 0x32, 0x78, 0x78,
	0x5f, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x16, 0x73, 0x74, 0x72, 0x54, 0x65, 0x66, 0x38,
	0x32, 0x78, 0x78, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x2a,
	0x97, 0x01, 0x0a, 0x17, 0x54, 0x45, 0x46, 0x38, 0x32, 0x78, 0x78, 0x5f, 0x52, 0x78, 0x4c, 0x70,
	0x66, 0x43, 0x75, 0x74, 0x4f, 0x66, 0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15, 0x52,
	0x58, 0x5f, 0x4c, 0x50, 0x46, 0x5f, 0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x5f, 0x31, 0x32, 0x5f,
	0x35, 0x4d, 0x48, 0x5a, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x58, 0x5f, 0x4c, 0x50, 0x46,
	0x5f, 0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x5f, 0x31, 0x35, 0x4d, 0x48, 0x5a, 0x10, 0x01, 0x12,
	0x17, 0x0a, 0x13, 0x52, 0x58, 0x5f, 0x4c, 0x50, 0x46, 0x5f, 0x43, 0x55, 0x54, 0x4f, 0x46, 0x46,
	0x5f, 0x32, 0x30, 0x4d, 0x48, 0x5a, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x52, 0x58, 0x5f, 0x4c,
	0x50, 0x46, 0x5f, 0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x5f, 0x32, 0x35, 0x4d, 0x48, 0x5a, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x58, 0x5f, 0x4c, 0x50, 0x46, 0x5f, 0x43, 0x55, 0x54, 0x4f,
	0x46, 0x46, 0x5f, 0x57, 0x49, 0x44, 0x45, 0x10, 0x04, 0x2a, 0xd1, 0x01, 0x0a, 0x17, 0x54, 0x45,
	0x46, 0x38, 0x32, 0x78, 0x78, 0x5f, 0x52, 0x78, 0x48, 0x70, 0x66, 0x43, 0x75, 0x74, 0x4f, 0x66,
	0x66, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x58, 0x5f, 0x48, 0x50, 0x46, 0x5f,
	0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x5f, 0x31, 0x30, 0x30, 0x4b, 0x48, 0x5a, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x58, 0x5f, 0x48, 0x50, 0x46, 0x5f, 0x43, 0x55, 0x54, 0x4f, 0x46, 0x46,
	0x5f, 0x32, 0x30, 0x30, 0x4b, 0x48, 0x5a, 0x10, 0x01, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x58, 0x5f,
	0x48, 0x50, 0x46, 0x5f, 0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x5f, 0x33, 0x30, 0x30, 0x4b, 0x48,
	0x5a, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x58, 0x5f, 0x48, 0x50, 0x46, 0x5f, 0x43, 0x55,
	0x54, 0x4f, 0x46, 0x46, 0x5f, 0x34, 0x30, 0x30, 0x4b, 0x48, 0x5a, 0x10, 0x03, 0x12, 0x18, 0x0a,
	0x14, 0x52, 0x58, 0x5f, 0x48, 0x50, 0x46, 0x5f, 0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x5f, 0x38,
	0x30, 0x30, 0x4b, 0x48, 0x5a, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x58, 0x5f, 0x48, 0x50,
	0x46, 0x5f, 0x43, 0x55, 0x54, 0x4f, 0x46, 0x46, 0x5f, 0x31, 0x36, 0x30, 0x30, 0x4b, 0x48, 0x5a,
	0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x58, 0x5f, 0x48, 0x50, 0x46, 0x5f, 0x43, 0x55, 0x54,
	0x4f, 0x46, 0x46, 0x5f, 0x33, 0x32, 0x30, 0x30, 0x4b, 0x48, 0x5a, 0x10, 0x06, 0x2a, 0x73, 0x0a,
	0x17, 0x54, 0x45, 0x46, 0x38, 0x32, 0x78, 0x78, 0x5f, 0x50, 0x52, 0x50, 0x43, 0x47, 0x65, 0x6e,
	0x4d, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x52, 0x5f, 0x50,
	0x43, 0x47, 0x45, 0x4e, 0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x10, 0x00,
	0x12, 0x22, 0x0a, 0x1e, 0x50, 0x52, 0x5f, 0x50, 0x43, 0x47, 0x45, 0x4e, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x41, 0x43, 0x45, 0x5f, 0x4d, 0x53, 0x42, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x51, 0x50,
	0x53, 0x4b, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x52, 0x5f, 0x50, 0x43, 0x47, 0x45, 0x4e,
	0x5f, 0x41, 0x44, 0x44, 0x5f, 0x51, 0x50, 0x53, 0x4b, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x53, 0x42,
	0x10, 0x02, 0x2a, 0x82, 0x01, 0x0a, 0x17, 0x54, 0x45, 0x46, 0x38, 0x32, 0x78, 0x78, 0x5f, 0x44,
	0x44, 0x4d, 0x41, 0x4d, 0x6f, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14,
	0x0a, 0x10, 0x50, 0x52, 0x5f, 0x44, 0x44, 0x4d, 0x41, 0x5f, 0x44, 0x49, 0x53, 0x41, 0x42, 0x4c,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x5f, 0x44, 0x44, 0x4d, 0x41, 0x5f,
	0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10,
	0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x52, 0x5f, 0x44, 0x44, 0x4d, 0x41, 0x5f, 0x54, 0x45, 0x53,
	0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x52, 0x5f, 0x44,
	0x44, 0x4d, 0x41, 0x5f, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x4e, 0x4f,
	0x43, 0x48, 0x49, 0x52, 0x50, 0x10, 0x03, 0x42, 0x06, 0x5a, 0x04, 0x2e, 0x2f, 0x70, 0x62, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_RadarFc2_ParamCfg_proto_rawDescOnce sync.Once
	file_proto_RadarFc2_ParamCfg_proto_rawDescData = file_proto_RadarFc2_ParamCfg_proto_rawDesc
)

func file_proto_RadarFc2_ParamCfg_proto_rawDescGZIP() []byte {
	file_proto_RadarFc2_ParamCfg_proto_rawDescOnce.Do(func() {
		file_proto_RadarFc2_ParamCfg_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_RadarFc2_ParamCfg_proto_rawDescData)
	})
	return file_proto_RadarFc2_ParamCfg_proto_rawDescData
}

var file_proto_RadarFc2_ParamCfg_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_proto_RadarFc2_ParamCfg_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_proto_RadarFc2_ParamCfg_proto_goTypes = []interface{}{
	(TEF82Xx_RxLpfCutOffType)(0),             // 0: RadarFc2_ParamCfg.TEF82xx_RxLpfCutOffType
	(TEF82Xx_RxHpfCutOffType)(0),             // 1: RadarFc2_ParamCfg.TEF82xx_RxHpfCutOffType
	(TEF82Xx_PRPCGenModeType)(0),             // 2: RadarFc2_ParamCfg.TEF82xx_PRPCGenModeType
	(TEF82Xx_DDMAModeSelType)(0),             // 3: RadarFc2_ParamCfg.TEF82xx_DDMAModeSelType
	(*RFE_ChirpShapeType)(nil),               // 4: RadarFc2_ParamCfg.RFE_ChirpShapeType
	(*RFE_SettingType)(nil),                  // 5: RadarFc2_ParamCfg.RFE_SettingType
	(*TEF82Xx_ProfileOptionalParamType)(nil), // 6: RadarFc2_ParamCfg.TEF82xx_ProfileOptionalParamType
	(*TEF82Xx_AutoDriftParamType)(nil),       // 7: RadarFc2_ParamCfg.TEF82xx_AutoDriftParamType
	(*TEF82Xx_PhaseRotatorParamType)(nil),    // 8: RadarFc2_ParamCfg.TEF82xx_PhaseRotatorParamType
	(*TEF82Xx_FrameOptionalParamType)(nil),   // 9: RadarFc2_ParamCfg.TEF82xx_FrameOptionalParamType
	(*RadarParamCfgType)(nil),                // 10: RadarFc2_ParamCfg.RadarParamCfgType
}
var file_proto_RadarFc2_ParamCfg_proto_depIdxs = []int32{
	4,  // 0: RadarFc2_ParamCfg.RFE_SettingType.straChirpShapes:type_name -> RadarFc2_ParamCfg.RFE_ChirpShapeType
	0,  // 1: RadarFc2_ParamCfg.TEF82xx_ProfileOptionalParamType.enuaRxLPF:type_name -> RadarFc2_ParamCfg.TEF82xx_RxLpfCutOffType
	1,  // 2: RadarFc2_ParamCfg.TEF82xx_ProfileOptionalParamType.enuaRxHPF:type_name -> RadarFc2_ParamCfg.TEF82xx_RxHpfCutOffType
	3,  // 3: RadarFc2_ParamCfg.TEF82xx_PhaseRotatorParamType.enuDdmaMode:type_name -> RadarFc2_ParamCfg.TEF82xx_DDMAModeSelType
	2,  // 4: RadarFc2_ParamCfg.TEF82xx_PhaseRotatorParamType.enuaFinalPCGenMode:type_name -> RadarFc2_ParamCfg.TEF82xx_PRPCGenModeType
	6,  // 5: RadarFc2_ParamCfg.TEF82xx_FrameOptionalParamType.straProfileOpParam:type_name -> RadarFc2_ParamCfg.TEF82xx_ProfileOptionalParamType
	7,  // 6: RadarFc2_ParamCfg.TEF82xx_FrameOptionalParamType.strAutoDrift:type_name -> RadarFc2_ParamCfg.TEF82xx_AutoDriftParamType
	8,  // 7: RadarFc2_ParamCfg.TEF82xx_FrameOptionalParamType.strPhaseRotator:type_name -> RadarFc2_ParamCfg.TEF82xx_PhaseRotatorParamType
	5,  // 8: RadarFc2_ParamCfg.RadarParamCfgType.strRfeSetting:type_name -> RadarFc2_ParamCfg.RFE_SettingType
	9,  // 9: RadarFc2_ParamCfg.RadarParamCfgType.strTef82xxFrameOpParam:type_name -> RadarFc2_ParamCfg.TEF82xx_FrameOptionalParamType
	10, // [10:10] is the sub-list for method output_type
	10, // [10:10] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_proto_RadarFc2_ParamCfg_proto_init() }
func file_proto_RadarFc2_ParamCfg_proto_init() {
	if File_proto_RadarFc2_ParamCfg_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_RadarFc2_ParamCfg_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RFE_ChirpShapeType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_RadarFc2_ParamCfg_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RFE_SettingType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_RadarFc2_ParamCfg_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TEF82Xx_ProfileOptionalParamType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_RadarFc2_ParamCfg_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TEF82Xx_AutoDriftParamType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_RadarFc2_ParamCfg_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TEF82Xx_PhaseRotatorParamType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_RadarFc2_ParamCfg_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TEF82Xx_FrameOptionalParamType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_RadarFc2_ParamCfg_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RadarParamCfgType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_RadarFc2_ParamCfg_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_RadarFc2_ParamCfg_proto_goTypes,
		DependencyIndexes: file_proto_RadarFc2_ParamCfg_proto_depIdxs,
		EnumInfos:         file_proto_RadarFc2_ParamCfg_proto_enumTypes,
		MessageInfos:      file_proto_RadarFc2_ParamCfg_proto_msgTypes,
	}.Build()
	File_proto_RadarFc2_ParamCfg_proto = out.File
	file_proto_RadarFc2_ParamCfg_proto_rawDesc = nil
	file_proto_RadarFc2_ParamCfg_proto_goTypes = nil
	file_proto_RadarFc2_ParamCfg_proto_depIdxs = nil
}
