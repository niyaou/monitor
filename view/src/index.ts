import { app, BrowserWindow, ipcMain, dialog, Menu } from 'electron';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}
Menu.setApplicationMenu(null)
// let localServer: WebServer;
const createWindow = (): void => {
  // console.log( process.env.NODE_ENV )
  // console.log("MAIN_WINDOW_WEBPACK_ENTRY:", process.env.NODE_ENV !== 'development')

  // localServer = new WebServer();
  // localServer.start();


  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 900,
    width: 1480,
    minHeight: 900,
    minWidth: 1480,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      // webSecurity: false,
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  if (process.env.NODE_ENV === 'development') {
    mainWindow.webContents.openDevTools();
  }
  mainWindow.maximize()

};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    // if (process.env.NODE_ENV !== 'development') {
    //   localServer.stop();
    // }
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.on('asynchronous-save', (event, data, suffix) => {
  console.log(data, suffix) // prints "ping"
  dialog.showSaveDialog({
    nameFieldLabel: 'defualt.' + suffix
  }).then(result => {
    console.log(result.canceled)
    console.log(result.filePath)
    if (result.canceled) {
      return
    }
    event.reply('asynchronous-save-reply', {
      data: data,
      suffix: suffix,
      filePath: result.filePath
    })
  }).catch(err => {
    console.log(err)
  })
})

ipcMain.on('asynchronous-open', (event, filters) => {
  const returns = dialog.showOpenDialogSync({
    properties: ['openFile'],
    filters: filters,
  })
  if (returns !== undefined && returns.length > 0) {
    event.returnValue = returns[0]
  } else {
    event.returnValue = undefined
  }
})

ipcMain.on('asynchronous-close', (event, filters) => {
  app.quit()
})

